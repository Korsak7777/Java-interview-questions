					Общие вопросы по Java
1. Методы класса Object
2. 0,1 + 0,2 == 0,3 что вернет?
3. &, | vs &&, ||
4. equals() vs ==
5. StreamAPI vs for, while, if - преимущества и недостатки
6. Abstract class vs Interfaces
7. fields initialization/object initialization - первичная инициализация
8. return & throw
9. JRE & JDK & JVM расскажите кратко, в чем разница?
10. Анонимные классы и лямбда выражения
11. Functional Interface
12. Внутренние классы: static nested class vs inner class vs локальные классы vs anonim class
13. Какие есть модификаторы переменых?
	а. final: field, method, class
	b. static: block, field, method, class
14. String
	a. Как происходит хранение строк в памяти?
	b. String vs StringBuilder vs StringBuffer
	c. Почему String неизменяемый? От чего это защищает?(многопоточность)
	d.  String a = "123"
		String b = "123"
		String c = new String(123)
		a == b - ???; b == c - ???; a == c - ???
15. Куча и стек в памяти
16. Исключения и их структура
	a. Что делать с проверяемыми исключениями?
	b. Можно ли поймать и обработать Error?
	c. В каких случаях нужно делать исключение проверяемым?
	d. Зачем так писать?
		List<Integer> delHalf(List<Integer> list){
			throw new RuntimeException();
		}
17. GarbageCollector
	a. Для чего нужен? Как работают? 
	b. По каким критериям удаляются объекты?
	c. Критерии эффективности работы сборщиков мусора
	d. Что такое st0p-the-world? Можно ли его полностью убрать?
18. Коллекции
	a. Какие есть интерфейсы коллекций?
	b. ArrayList vs LinkedList
	c. Какие интерфейсы реализует LinkedList?
	d. List vs Set
	e. Что будет если мы запишем элемент в Set, если он там уже есть? Вылетит ли исключение?
19. Hash структуры
	a. Контракт hashCode() & equals()
	b. Работа HashMap & HashSet
	c. Какие объекты не стоит использовать в качестве ключей в hash-структурах
20. Что такое очередь, стек? LIFO? FIFO? Как из 2х стеков сделать очередь?
21. Try 
	a. с ресурсами
		i. Какие классы мы можем использовать в качестве объекта try?
		ii. Можно ли в одном try использовать несколько ресурсов?
		iii. try( /* тут выскочит ошибка при закрытии */){
				/* тут выскочит просто ошибка */
			} catch (Throwable throwable) {
				throwable.printStackTrace(); //Что выскочит тут?
			}
	b. catch & finally
22. Enum
	a. equals() vs == для Enum
	b. Могут ли быть тут абстрактные методы?
	c. Какой метод из Object можно переопределить?
	d. Какой hashCode() возвращает Enum?
23. Generic Java (что будет при раскоментировании строк?)
	class Animal{}
	class Cat extends Animal{}
	
	public class Zoo{
		public static void main(Strng[] dtrings){
			List<Animal> animalList = new ArrayList<>();
			List<Cat> catList = new ArrayList<>();
			
			//animalList.add(new Cat());
			//catList.add(new Animal());
			//catList = animalList;
			//animalList = catList;
			
			//В чем разница нижестоящих списков? Какие объекты в них можно добавить?
			//Что будет если заменить классы на интерфейсы?
			List<? extends Animal> animals = new ArrayList<>();
			List<? super Animal> objects = new ArrayList<>();
			List<? super Cat> objects1 = new ArrayList<>();
			List<? extends Cat> cats = new ArrayList<>();
		}
	}
24. Java concurrency
	a. Модель памяти в Java 
	b. Synchronized: блок и метод
	c. happens-before?
	d. Как создать поток в Java? Сразу много потоков? Перечислите несколько способов.
	e. Как остановить поток в Java?
	f. Для чего нужны неизменяемые объекты? Как сделать класс неизменяемым? (3 основных действия)
	g. wait(), notify(), notifyAll()
	h. final vs volatile
25. Что такое сериализация?
	a. Интерфейсы Serializable & Externable?
	b. transient?
26. Что такое Singleton? Как создается?
27. Maven
	a. Lifecycle?
	b. Виды <scope>
28. Аннотации, принцип работы, для чего нужны, типы аннотаций.
29. ++i vs i++

							Spring
1. Как и за счет чего работает SpringBoot? Как контролировать SpringBoot?
2. Для чего нужен SpringCore?
3. Как происходит внедрение зависимостей? Какие существуют аннотации? Что можно аннотировать? В чем разница между аннотированием set-тера и конструктора?
4. Опишите жизненный цикл бина в Spring.
5. Что такое BeanScope в Spring?
6. Что такое bean(без Spring)?

				Небольшие задачки на качество кода.
1. Написать реализацию:
	public class Test{
		List<Integer> l;
		
		Test(List<Integer> list){
			this.l = list;
		}
		/** удаляет четные елементы из списка l */
		void delHalf() {}
	}
2. Напишите класс реализующий решение квадратного уравнения
3. Есть таблица в БД/в оперативной памяти/где-то на компе - acount в которой есть поля id(уникальный идентификатор) и amount(сумма денег на счете).
4. Написать функцию transfer(from, to, id) переводящую деньги с одного счета на другой. (Для одно и многопоточной среды)
5. К нам приходит входящий запрос, по которому необходимо собрать информацию из нескольких источников (БД, Rest сервисы и т.д.) и выдать ответ. Как это сделать оптимально?
6. У нас есть класс:
	public class Main{
		public static void main(String[] strings){
			System.out.println("Hello world!");
		}
	}
	Необходимо так изменить программу, что бы в консоль вывело: "Hello RenCredit!".
	Ограничение: нельзя трогать функцию main(2, 3, 4 строка)
	Существует 3 способа решения (вроде бы)
7.  Написать реализацию интерфейса(для одно и многопоточной среды):
	interface Test1{
		/** получает число */
		void onRecieve(int number);
		/** выводит 10 самых больших чисел из полученных */
		void topTen();
	}
	
							SQL из Java
1. Как подключиться к БД из нескольких потоков?
2. Какие существуют механизмы управления схемами в Hibernate?
3. Две функции аннотированны аннотацией @Transaction из Hibernate. Одну функцию мы запускаем внутри другой. Что произойдет? Почему?
4. SQL injection - что это? Как это предотвращенно в Hibernate и JDBC?
5. Как prepareStatement помогает избежать SQLInjection?
6. JDBC - что делает prepareStatement? Для чего нужен Statement?
7. Что такое JPA? В чем отличие от Hibernate?
8. Уровни кеша в Hibernate?
9. Entity в Hibernate. Всегда ли Entity соответствуют обектам в БД?
10. Как могут взаимодействовать таблицы в БД между собой? Как это прописывается в Hibernate? Как раелизуется отношение многие ко многим?
11. Как делать транзакции в Hibernate, какие есть уровни изолированности? Класс аннотирован @Transactional, будут ли private методы класса транзакциоными?
12.Откат операции при транзакции. Какой Exception нужно сгенерировать, что бы откатить транзакцию?

							Web
1. Происходит HTTP запрос. Как Spring понимает на какой контроллер происходит этот запрос? Из чего состоит HTTP запрос? Как Spring обрабатыват запрос? Внутри чего, в данном контексте, лежит Spring(отв. Servlet Container)? Что такое сервлет? Что такое ServletAPI?
2. RestHTTP протоколы - 5 типов ответов.
3. Что такое JSP? Servlet? Где конфигурируется работа web-приложений? Что можно конфигурировать в web.xml? Какие есть фильтры?
4. Как приложению узнать к какому адресу происходят обращения?
5. Как инициализируется сервлет? В момент запуска или в момент обращения к нему?
6. Что такое SOAP, WSD, XML, XSD, JSON?

							SQL
1. Как реализовать отношение многие ко многим, между таблицами в БД?
2. Для чего нужен having в sql запросах, если есть where?
3. Outer join vs Inner join vs union?
4. Что такое DDL? DML?
5. Commit - это DML или DDL?
6. Транзакции
7. ACID
8. Уровни изоляции транзакции
9. DedLock
10. Индекс
11. Типы join

					Общие вопросы
1. Map Reduce(рассказать реализацию)
2. Java Reflection - что такое? Зачем нужно?
3. Шаблоны проектирования
4. Архитектурные шабоны
5. Принципы ООП(SOLID)
6. Принципы структурирования ООП(абстрагирование, инкапсуляция, наследование, полиморфизм)
7. DI & IoC

					Другие вопросы
1. Ситуация: у нас одна БД, с которой работает очень много приложений(мильон). Необходимо изменить имя столбца в одной из схем БД. Как это сделатьь в runtime, т.е. без остановки сервисов? (Ограничение: Текущии версии приложений не смогут работать на новой структуре БД)
2. Стандарты защиты OWASP
3. Что такое контейниризация? (сам не знаю что это)
